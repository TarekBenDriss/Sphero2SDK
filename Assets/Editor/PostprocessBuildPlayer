#!/usr/bin/env python

import sys
import os.path
import os

# This script should run automatically after Unity builds the xcode project
# Supported External accessories, required frameworks, linker flags
# and header search paths will automatically be setup.
#
# This script will do nothing if the build target is Android.
#
# To ensure this runs properly please run the python 2.7.x installer for mac from here:
# http://www.python.org/ftp/python/2.7.3/python-2.7.3-macosx10.6.dmg
# Installing python from other locations such as MacPorts seems to cause this script to not run.
#
# Script compiled using techniques from various sources by Jon Carroll 6.23.2012.
# This script uses reverse engineered xcodeproj format from the current release
# of XCode, it will probably break at some point.


# ****** SCRIPT CUSTOMIZATION ********
# Edit the section below to customize how this script works

# These ids have been generated by creating a project using Xcode then
# extracting the values from the generated project.pbxproj.	 The format of this
# file is not documented by Apple so the correct algorithm for generating these
# ids is unknown.  Using ids generated by an existing project seems to work.

EXTERNALACCESSORY_ID = '81975D8B1593EC5E00880B44'
EXTERNALACCESSORY_FILEREFID = '81975D8A1593EC5D00880B44'

ROBOTKIT_ID = '81975D891593EC4900880B44'
ROBOTKIT_FILEREFID = '81975D881593EC4900880B44'

# List of all the frameworks to be added to the project
frameworks = [["ExternalAccessory.framework", EXTERNALACCESSORY_ID, EXTERNALACCESSORY_FILEREFID, "System/Library/Frameworks/", "SDKROOT"], \
			  ["RobotKit.framework", ROBOTKIT_ID, ROBOTKIT_FILEREFID, "../Assets/Plugins/iOS/", "\"<group>\""]]

# List of data files to be added to the app bundle, see RESFILE_* constants for array order (currently hasn't been tested but should work 6.23.2012)
resfiles = []

# List of header search paths to add to the project (paths will automatically be wrapped in quotes)
searchPaths = []

# List of additional linker flags to add to the project
linkerFlags = ["-lsqlite3.0"]

# List of info.plist additions. Array format is key, xml value string
plistAdditions = [["UISupportedExternalAccessoryProtocols", "<array><string>com.orbotix.robotprotocol</string></array>"]]

# Frameowrk search path
frameworkSearchPaths = []

# ****** END SCRIPT CUSTOMIZATION ********
# Don't edit the stuff below unless you know what you are doing.



# Frameworks array index constants
FRAMEWORK_NAME = 0
FRAMEWORK_ID = 1
FRAMEWORK_FILEREFID = 2
FRAMEWORK_BASEPATH = 3
FRAMEWORK_SOURCETREE = 4

# Resources array index constants
RESFILE_NAME = 0
RESFILE_ID = 1
RESFILE_FILEREFID = 2
RESFILE_LASTKNOWNTYPE = 3
RESFILE_BASEPATH = 4

# Adds a line into the PBXBuildFile section
def add_build_file(pbxproj, id, name, fileref):
	subsection = 'Resources'
	if name[-9:] == 'framework':
		subsection = 'Frameworks'
	print "Adding build file " + name + '\n'
	pbxproj.write('\t\t' + id + ' /* ' + name  + ' in ' + subsection + ' */ = {isa = PBXBuildFile; fileRef = ' + fileref +	' /* ' + name + ' */; };\n')

#Adds a line to the PBXFileReference to add a resource file
def add_res_file_reference(pbxproj, id, name, last_known_file_type, base_path):
	print "Adding data file reference " + name + "\n"
	pbxproj.write('\t\t' + id + ' /* ' + name + ' */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = ' + last_known_file_type + '; name = ' + name + '; path = ' + base_path + name + '; sourceTree = \"<group>\"; };\n')

# Adds a line into the PBXFileReference section to add a framework
def add_framework_file_reference(pbxproj, id, name, base_path, source_tree):
	print "Adding framework file reference " + name + '\n'
	pbxproj.write('\t\t' + id + ' /* ' + name + ' */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = ' + name + '; path = ' + base_path + name + '; sourceTree = ' + source_tree + '; };\n')

# Adds a line into the PBXFrameworksBuildPhase section
def add_frameworks_build_phase(pbxproj, id, name):
	print "Adding build phase " + name + '\n'
	pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' in Frameworks */,\n')

# Adds a line into the PBXResourcesBuildPhase section
def add_resources_build_phase(pbxproj, id, name):
	print "Adding build phase " + name + '\n'
	pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' in Resources */,\n')

# Adds a line into the PBXGroup section
def add_group(pbxproj, id, name):
	print "Add group " + name + '\n'
	pbxproj.write('\t\t\t\t' + id + ' /* ' + name + ' */,\n')


# Processes the given xcode project to add or change the supplied parameters
#	xcodeproj_filename - filename of the Xcode project to change
#	frameworks - list of Apple standard frameworks to add to the project
#	resfiles - list resource files added to the project
def process_pbxproj(xcodeproj_filename, frameworks, resfiles):

	# Open up the file generated by Unity and read into memory as
	# a list of lines for processing
	pbxproj_filename = xcodeproj_filename + '/project.pbxproj'
	pbxproj = open(pbxproj_filename, 'r')
	lines = pbxproj.readlines()
	pbxproj.close()

	# Check if file has already been processed and only proceed if it hasn't,
	# we'll do this by looping through the build files and see if ExternalAccessory.framework
	# is there
	i = 0
	found = False
	while (not found) and (lines[i][3:6] != 'End'):
		found = lines[i].find('ExternalAccessory.framework') > 0
		i = i+1

	if found:
		print "RobotKit and ExternalAccessory have already been added to XCode project"
	else:
		# Next open up an empty project.pbxproj for writing and iterate over the old
		# file copying the original file and inserting anything extra we need
		pbxproj = open(pbxproj_filename, 'w')

		# As we iterate through the list we'll record which section of the
		# project.pbxproj we are currently in
		section = ''

		# We use these booleans to decide whether we have already added the list of
		# build files to the link line.	 This is needed because there could be multiple
		# build targets and they are not named in the project.pbxproj
		frameworks_build_added = False
		res_build_added = False

		i = 0
		for i in range(0, len(lines)):
			line = lines[i]
			# Write the current line to the file
			if line.strip().startswith("DEBUG_INFORMATION_FORMAT"):
				pbxproj.write("\t\t\t\tDEBUG_INFORMATION_FORMAT = dwarf-with-dsym;\n")
			else:		
				pbxproj.write(line)

			# Each section starts with a comment such as
			# /* Begin PBXBuildFile section */'
			if line[3:8] == 'Begin':
				section = line.split(' ')[2]
				if section == 'PBXBuildFile':
					for framework in frameworks:
						add_build_file(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME], framework[FRAMEWORK_FILEREFID])
					for resfile in resfiles:
						add_build_file(pbxproj, resfile[RESFILE_ID], resfile[RESFILE_NAME], resfile[RESFILE_FILEREFID])

				if section == 'PBXFileReference':
					for framework in frameworks:
						add_framework_file_reference(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME], framework[FRAMEWORK_BASEPATH], framework[FRAMEWORK_SOURCETREE])
					for resfile in resfiles:
						add_res_file_reference(pbxproj, resfile[RESFILE_FILEREFID], resfile[RESFILE_NAME], resfile[RESFILE_LASTKNOWNTYPE], resfile[RESFILE_BASEPATH])

				

			if line[3:6] == 'End':
				section = ''

			if section == 'PBXFrameworksBuildPhase':
				if line.strip()[0:5] == 'files':
					if not frameworks_build_added:
						for framework in frameworks:
							add_frameworks_build_phase(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME])
						frameworks_build_added = True

			# The PBXResourcesBuildPhase section is what appears in XCode as 'Link
			# Binary With Libraries'.  As with the frameworks we make the assumption the
			# first target is always 'Unity-iPhone' as the name of the target itself is
			# not listed in project.pbxproj
			if section == 'PBXResourcesBuildPhase':
				if line.strip()[0:5] == 'files':
					if not res_build_added:
						for resfile in resfiles:
							add_resources_build_phase(pbxproj,resfile[RESFILE_ID], resfile[RESFILE_NAME])
						res_build_added = True

			# The PBXGroup is the section that appears in XCode as 'Copy Bundle Resources'. 
			if section == 'PBXGroup':
				if (line.strip()[0:8] == 'children') and (lines[i-2].strip().split(' ')[2] == 'CustomTemplate'):
					for resfile in resfiles:
						add_group(pbxproj, resfile[RESFILE_FILEREFID], resfile[RESFILE_NAME])
					for framework in frameworks:
						add_group(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME])

			#Add the additional header search paths and linker flags
			if section == 'XCBuildConfiguration':
				if line.strip().startswith('buildSettings'):
					if(len(searchPaths) > 1):
						pbxproj.write('\t\t\t\tHEADER_SEARCH_PATHS = (\n')
						for path in searchPaths:
							pbxproj.write('\t\t\t\t\t\"\\\"' + path + '\\\"/**\",\n')
						pbxproj.write('\t\t\t\t);\n')
					elif(len(searchPaths)==1):
						pbxproj.write('\t\t\t\tHEADER_SEARCH_PATHS = ')
						pbxproj.write('\"' + searchPaths[0] + '/**\";\n')
					# Add framework search paths for any frameworks not in SDKROOT
					frameworkHeaderWritten = False
					for framework in frameworks:
						if framework[FRAMEWORK_SOURCETREE] != "SDKROOT":
							if frameworkHeaderWritten == False:
								pbxproj.write('\t\t\t\tFRAMEWORK_SEARCH_PATHS = (\n')
								pbxproj.write('\t\t\t\t\t\"$(inherited)\",\n')
								frameworkHeaderWritten = True
							pbxproj.write('\t\t\t\t\t\"\\\"$(SRCROOT)/' + framework[FRAMEWORK_BASEPATH] + '\\\"\",\n')
					for path in frameworkSearchPaths:
						if frameworkHeaderWritten == False:
							pbxproj.write('\t\t\t\tFRAMEWORK_SEARCH_PATHS = (\n')
							pbxproj.write('\t\t\t\t\t\"$(inherited)\",\n')
							frameworkHeaderWritten = True
						pbxproj.write('\t\t\t\t\t\"\\\"' + path + '\\\"\",\n')
					if frameworkHeaderWritten == True:
						pbxproj.write('\t\t\t\t);\n')
				#Add other linker flags
				if line.strip() == 'OTHER_LDFLAGS = (':
					for flag in linkerFlags:
						pbxproj.write('\t\t\t\t\t\"' + flag + '\",\n')
 
		#close the project, we are done writing to it
		pbxproj.close()


#Add additional fields to the info.plist
def update_plist(info_plist_path):
	file = open(info_plist_path, 'r')
	plist = file.read()
	file.close()

	for item in plistAdditions:
		elements_to_add = "<key>" + item[0] + "</key>\n" + item[1] + "\n"
		plist = plist.replace('<key>', elements_to_add + '<key>', 1)
		
	file = open(info_plist_path, 'w')
	file.write(plist)
	file.close()



# Script start (I can't figure out where this prints to, but printing just in case)
print "Starting PostProcessBuildPlayer with the following arguments..."

i = 0
for args in sys.argv:
	print str(i) +': ' + args
	i += 1

install_path = sys.argv[1]
target_platform = sys.argv[2]

# Check this is an iOS build before running
if target_platform != "iPhone":
	print "Invalid platform, exiting"
	sys.exit()


# Make changes to the xcode project
xcodeproj_full_path_name = install_path + '/Unity-iPhone.xcodeproj'
process_pbxproj(xcodeproj_full_path_name, frameworks, resfiles)

# Make changes to the info.plist independently of the xcodeproj because it is overwritten on an append
info_plist_path = os.path.join(install_path, 'Info.plist')
update_plist(info_plist_path)

print "PostProcessBuildPlayer completed successfully";

#os.system("python2.6 runner.py '" + sys.argv[1] + "'")
#execfile("runner.py")
